#+TITLE: ATM Tech's Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

* Package System Setup
My current setup uses package.el (default emacs package manager) and use-package to manage all of my packages.
#+begin_src emacs-lisp
;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src
* UI Configuration
** Basic Settings
These settings remove a lot of unneeded elements in the default appearance.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 13)        ; Give some breathing room

  (menu-bar-mode -1)          ; Disable the menu bar

  (setq visible-bell t)       ; Enable the visual bell
#+end_src
** Font Configuration
The fonts I normally use are Jetbrains Mono for monospace and Noto Sans for everything else. I use Nerd Fonts to add more symbol compatibility.
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "JetbrainsMono Nerd Font" :height 150)
(set-face-attribute 'fixed-pitch nil :font "JetbrainsMono Nerd Font" :height 150)
(set-face-attribute 'variable-pitch nil :font "NotoSans Nerd Font" :height 175)
#+end_src
** Line Numbers
I tend to prefer relative line numbers in my editors (visual just shows the actual line number on the current line). Additional settings are also included to make sure the line numbers never push text away from where it should be.
#+begin_src emacs-lisp
(setq display-line-numbers-type 'visual)
(setq display-line-numbers-width-start t)
(setq display-line-numbers-grow-only t)
(column-number-mode)
(global-display-line-numbers-mode t)
#+end_src
Though line numbers aren't wanted in shells or when I am writing.
#+begin_src emacs-lisp
(dolist (mode '(term-mode-hook
                shell-mode-hook
		    org-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src
** Color Theme
I am using the hard dark gruvbox theme from doom-themes.
#+begin_src emacs-lisp
;; Needed to autotrust theme
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)

(use-package doom-themes
  :init (load-theme 'doom-gruvbox)
  :custom ((doom-gruvbox-dark-variant "hard")))
#+end_src
** Better Modeline
I am using the doom-modeline which is an attractive modeline with nice icons. It should be noted that =all-the-icons-install-fonts= needs to be ran to make sure the correct icon fonts are installed.
#+begin_src emacs-lisp
(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src
diminish stops modes from packages appearing in the mode line.
#+begin_src emacs-lisp
(use-package diminish)
#+end_src
** Which Key
which-key allows me to see all of the possible key combinations after I press a certain key.
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :custom ((which-key-idle-delay 0.5)))
#+end_src
** Ivy and Counsel
These are the completion frameworks I have chosen to use.
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         :map ivy-switch-buffer-map
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1)
  :custom ((ivy-initial-inputs-alist nil))) ;; Dosen't start searchs with ^
  
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel
    :config
    (counsel-mode 1)
    :bind (:map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))
#+end_src
** Helpful
This package allows more useful output in Emacs' help prompts.
#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src
** Improved prompt sorting with prescient.el
Sorts ivy completions based on usage.
#+begin_src emacs-lisp
(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  ;; Uncomment the following line to have sorting remembered across sessions!
  (prescient-persist-mode 1)
  (ivy-prescient-mode 1))
#+end_src
* Keybinding Configuration
** Evil Mode
I am a big fan of evil mode and vim keybindings, modal editing just makes sense to me. 
#+begin_src emacs-lisp
;; Make ESC globally quit prompts
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-delete t)
  (setq evil-want-C-i-jump nil)
  (setq evil-want-Y-yank-to-eol t)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion (kbd "<down>") 'evil-next-visual-line)
  (evil-global-set-key 'motion (kbd "<up>")   'evil-previous-visual-line)

  ;; Use C-b to switch buffers
  (evil-global-set-key 'normal (kbd "C-b") 'counsel-switch-buffer)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src
** Custom Keybindings
I use general.el to configure all my personal keybindings.
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer atm/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (atm/leader-keys
      "o"  '(:ignore t :which-key "open")
      "oo" '((lambda () (interactive) (counsel-find-file "~/docs/org/")) :which-key "org files")
      "ot" '((lambda () (interactive) (find-file "~/docs/org/tasks.org")) :which-key "tasks")
      "oa" '((lambda () (interactive) (org-agenda nil "d")) :which-key "agenda")
      "oc" '((lambda () (interactive) (find-file "~/.emacs.d/Emacs.org")) :which-key "config")
      "oq" '(org-capture :which-key "quick capture")
      "m"  '(:ignore t :which-key "org")
      "mt" '(org-todo :which-key "todo")
      "p"  '(:keymap projectile-command-map :package projectile :which-key "projects")))
#+end_src
* Emacs Functionality 
** Keep folders clean
Moves all of emacs' random files to a single directory.
#+begin_src emacs-lisp
(use-package no-littering)

;; no-littering doesn't set this by default so we must place
;; auto save files in the same path as it uses for sessions
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src
** Auto-saving
I use super-save which will save files when I switch buffers or the frame loses focus
#+begin_src emacs-lisp
(use-package super-save
  :ensure t
  :custom ((super-save-auto-save-when-idle t))
  :config
  (super-save-mode +1))
#+end_src
* Org Mode
** Font Settings
I prefer to used variable pitch fonts in org mode. This is achieved by activating variable-pitch-mode as well as enable a third party mode (mixed-pitch-mode) that will make sure certain elements retain fixed pitch fonts.
#+begin_src emacs-lisp
(use-package mixed-pitch)

(defun atm/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (mixed-pitch-mode 1)
  (visual-line-mode 1))
#+end_src
** Basic Settings
This is the basic configuration for the packages, including my agenda files, todo states, org-agenda commands, etc.
#+begin_src emacs-lisp
(use-package org
  :hook (org-mode . atm/org-mode-setup)
  :config

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-agenda-files
	'("~/docs/org/tasks.org"))

  (setq org-todo-keywords
	'((sequence "TODO(t)" "NEXT(n)" "STRT(s)" "|" "DONE(d!)")))

  ;; Configure custom agenda views
  (setq org-agenda-custom-commands
	'(("d" "Dashboard"
	((agenda "" ((org-deadline-warning-days 7)))
	(todo "NEXT"
	((org-agenda-overriding-header "Next Tasks")))))

  ("n" "Next Tasks"
	((todo "NEXT"
	((org-agenda-overriding-header "Next Tasks")))))))

  ;; Save Org buffers after refiling
  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-ellipsis " â–¾"))
#+end_src
** Nicer Bullets
org-superstar uses nicer header and bullet icons that default org mode.
#+begin_src emacs-lisp
(use-package org-superstar
  :hook (org-mode . org-superstar-mode)
  :custom ((org-hide-leading-stars t)))

(setq inhibit-compacting-font-caches t) ; Eliminates possible performance issues
#+end_src
** Centering Org Buffers
visual-fill-column allow the centering of org buffers to better focus and overall create a better writing experience.
#+begin_src emacs-lisp
(defun atm/org-mode-visual-fill ()
  (setq visual-fill-column-width 200
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . atm/org-mode-visual-fill))
#+end_src
** Capture Templates
#+begin_src emacs-lisp
;; Make sure to enter insert mode
(add-hook 'org-capture-mode-hook 'evil-insert-state)

(setq org-capture-templates
  `(("t" "Task" entry (file+olp "~/docs/org/tasks.org" "Inbox")
  "* TODO %?\nSCHEDULED: %t")
    ("j" "Journal" entry (file+olp+datetree "~/docs/org/journal.org")
        "\n* %<%I:%M %p> - Journal :journal:\n\nToday I am grateful %?\n\n"
        :clock-in :clock-resume)))
#+end_src
** Babel
*** Languages
Sets which languages org-babel should tangle.
#+begin_src emacs-lisp
(org-babel-do-load-languages
  'org-babel-load-languages
  '((emacs-lisp . t)))
#+end_src
*** Structure Templates
Structure Templates allow quick expansion to code blocks without writing out the normal format.
#+begin_src emacs-lisp
(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
#+end_src
*** Auto-tangle Configuration Files
Adds a hook to the saving of this file to automatically tangle out the resulting init.el.
#+begin_src emacs-lisp
(defun atm/org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.emacs.d/Emacs.org"))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'atm/org-babel-tangle-config)))
#+end_src
* Development
** Projectile
Allows project management and easier navigation between projects.
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/repo")
    (setq projectile-project-search-path '("~/repo")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src
** Magit
Very nice git interface within Emacs.
#+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package evil-magit
  :after magit)
#+end_src
** Rainbow Delimeters
Makes brackets and parentheses easier to tell apart from each other.
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
